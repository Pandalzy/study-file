PORT_A EQU 280H          ; 8255
PORT_B EQU 281H
PORT_C EQU 282H
PORT_CTL EQU 283H

CLK_0 EQU 288H         ; 8253计数器
CLK_1 EQU 289H
CLK_2 EQU 28AH
CLK_CTL EQU 28BH

I8259_1 EQU 2B0H       ;8259的ICW1端口地址
I8259_2 EQU 2B1H       ;8259的ICW2端口地址
I8259_3 EQU 2B1H       ;8259的ICW3端口地址
I8259_4 EQU 2B1H       ;8259的ICW4端口地址
O8259_1 EQU 2B1H       ;8259的OCW1端口地址
O8259_2 EQU 2B0H       ;8259的OCW2端口地址
O8259_3 EQU 2B0H       ;8259的OCW3端口地址

PORT_DAC EQU 290H          ; DAC口地址
PORT_273 EQU 2A0H 

SET_INTR MACRO INT_N,INTR_AD
    ;中断向量的设置
    ; MOV AX, 0
    ; MOV ES, AX
    ; MOV BX, (INT_N)*4
    ; MOV AX, OFFSET INTR_AD
    ; MOV ES:[BX], AX
    ; MOV AX, SEG INTR_AD
    ; MOV ES:[BX+2], AX
    MOV AX, 0
    MOV ES, AX
    MOV DI, (INT_N)*4
    MOV AX, OFFSET INTR_AD
    CLD
    STOSW
    MOV AX,CS
    STOSW
ENDM
CMD_SETUP MACRO
    ;LCD命令设置
    MOV DX,PORT_C ; 指向8255端口控制端口
    NOP
    MOV AL,00000000B ; PC1置0,pc0置0 （LCD I端=0，W端＝0）
    OUT DX, AL
    NOP
    MOV AL,00000100B ; PC2置1 （LCD E端＝1）
    OUT DX, AL
    NOP
    MOV AL, 00000000B ; PC2置0,（LCD E端置0）
    OUT DX, AL
ENDM

DATA_SETUP MACRO
    ;LCD写数据
    MOV DX,PORT_C ; 指向8255控制端口
    MOV AL,00000001B ; PC1置0，PC0=1 （LCD I端=1）
    OUT DX, AL
    NOP
    MOV AL,00000101B ; PC2置1 （LCD E端＝1）
    OUT DX, AL
    NOP
    MOV AL, 00000001B ; PC2置0,（LCD E端＝0）
    OUT DX, AL
    NOP
ENDM
STRING_SHOW MACRO INT_N
    LOCAL CONTINUE1
    ;一行显示几个汉字，INT_N为参数
    MOV CL,INT_N
CONTINUE1:    
    PUSH CX
    MOV AL,HZ_ADR
    MOV DX, PORT_A
    OUT DX, AL
    CMD_SETUP ; 设定DDRAM地址命令
    MOV AX,[BX]
    PUSH AX
    MOV AL,AH ; 先送汉字编码高位
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP ; 输出汉字编码高字节
    POP AX
    MOV DX,PORT_A
    OUT DX, AL
    DATA_SETUP ; 输出汉字编码低字节
    INC BX
    INC BX ; 修改显示内码缓冲区指针
    INC BYTE PTR HZ_ADR ; 修改LCD显示端口地址
    POP CX
    DEC CL
    JNZ  CONTINUE1
ENDM


DATA SEGMENT
INI_GOODS_DATA DW 0A2B1H,0BFC9H,0C0D6H,0A3A8H,0D3E0H,0A3B1H,0A3B0H,0A3A9H ;1.可乐（余10）
  DW 0A2B2H,0D1A9H,0B1CCH,0A3A8H,0D3E0H,0A3B1H,0A3B0H,0A3A9H ;2.雪碧（余10）
  DW 0A2B3H,0C2F6H,0B6AFH,0A3A8H,0D3E0H,0A3B1H,0A3B0H,0A3A9H ; 3.脉动（余10）
  DW 0A2B4H,0C3E6H,0B0FCH,0A3A8H,0D3E0H,0A3B1H,0A3B0H,0A3A9H ;4.面包（余10）

HZ_ADR  DB 00H ; 存放显示行起始端口地址
TEM_ADR  DW 000FH
AL_DATA DB 00H
AH_DATA DB 00H
MESS      DB 'TPCA INTERRUPT3!',0DH,0AH,'$'
; LED_DATA DB 3FH,06H,5BH,4FH,66H,6DH,7DH,07H,7FH,6FH
LED_DATA DB 40H,79H,24H,30H,19H,12H,02H,78H,00H,18H,80H
GOODS_TITLE  
DW 0D1A1H,0D4F1H,0BFC9H,0C0D6H,0A1A0H,0A3B4H,0D4AAH,0A1A0H ; 1.可乐
    DW 0D1A1H,0D4F1H,0D1A9H,0B1CCH,0A1A0H,0A3B3H,0D4AAH,0A1A0H ; 2.雪碧
    DW 0D1A1H,0D4F1H,0C2F6H,0B6AFH,0A1A0H,0A3B2H,0D4AAH,0A1A0H ; 3脉动
    DW 0D1A1H,0D4F1H,0C3E6H,0B0FCH,0A1A0H,0A3B1H,0D4AAH,0A1A0H ; 4面包

YES_NO DW 0CAC7H,0A1A0H,0A1A0H,0B7F1H,0A1A0H,0A1A0H,0A1A0H,0A1A0H ;是否

OUT_GOOD DW 0D5FDH,0D4DAH,0B3F6H,0BBF5H,0A3ACH,0C7EBH,0C9D4H,0B5C8H ; 正在出货，请稍等
OUT_GOOD_SUCCESS 
DW 0B3F6H,0BBF5H,0B3C9H,0B9A6H,0A1A0H,0A1A0H,0A1A0H,0A1A0H ; 出货成功

ADD_GOOD DW 0CAE4H,0C8EBH,0BFDAH,0C1EEH,0B2B9H,0BBF5H,0A1A0H,0A1A0H ; 输入口令补货
ADD_GOOD_OK 
DW 0B2B9H,0BBF5H,0B3C9H,0B9A6H,0A1A0H,0A1A0H,0A1A0H,0A1A0H ; 补货成功
PASS_WORD DW 0A3B1H,0A3B2H,0A3B1H,0A3B2H,0A3B1H,0A3B2H,0A1A0H,0A1A0H ; ROOT预设密码
PASS_INPUT DW 0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H ; 输入口令
PASS_WRONG 
DW 0BFDAH,0C1EEH,0B4EDH,0CEF3H,0A1A0H,0A1A0H,0A1A0H,0A1A0H ; 口令错误

BLANK_LINE  
DW 0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H,0A1A0H ; 空白行
KEYBOARD_DATA  
DB 57H,5BH,5DH,5EH,097H,09BH,09DH,09EH,0B7H,0BBH,0BDH,0BEH,0C7H,0CBH,0CDH,0CEH; 键盘扫描码
; KEYBOARD_DATA  
DB 77H,7BH,7DH,7EH,0B7H,0BBH,0BDH,0BEH,0D7H,0DBH,0DDH,0DEH,0E7H,0EBH,0EDH,0EEH; 键盘扫描码
WHICH_GOOD DB 00H
PASS_COUNT DW 0000H
MONEY_COUNT DW 0000H
STRING_MONEY DW 0CAD5H,0D2E6H,0000H,0000H,0000H,0D4AAH,0A1A0H,0A1A0H ;收益XXX元

QC_GOODS DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,07H,0F6H,03H,12H,9FH,0C0H,00H,00H,04H,11H,27H,0ABH,10H,40H,00H 
DB 00H,05H,0D6H,81H,61H,17H,40H,00H,00H,05H,0D0H,0E6H,66H,17H,40H,00H
DB 00H,05H,0D6H,5AH,4AH,17H,40H,00H,00H,04H,11H,42H,56H,10H,40H,00H
DB 00H,07H,0F5H,55H,55H,5FH,0C0H,00H,00H,00H,04H,34H,44H,0C0H,00H,00H
DB 00H,00H,33H,0CAH,0C7H,0D5H,40H,00H,00H,05H,4AH,94H,0F9H,27H,00H,00H
DB 00H,05H,72H,64H,0CEH,85H,40H,00H,00H,05H,01H,0F8H,80H,08H,40H,00H
DB 00H,05H,7BH,09H,0D8H,30H,0C0H,00H,00H,01H,0EH,0E6H,0FCH,8AH,80H,00H
DB 00H,05H,0DDH,10H,48H,0F1H,40H,00H,00H,06H,85H,00H,5CH,77H,40H,00H
DB 00H,02H,0BCH,0D6H,0DH,7DH,0C0H,00H,00H,04H,2BH,60H,9FH,98H,80H,00H
DB 00H,04H,5DH,42H,82H,91H,40H,00H,00H,03H,0EDH,8AH,4DH,5AH,00H,00H
DB 00H,02H,3BH,60H,07H,3FH,00H,00H,00H,05H,61H,21H,15H,0B6H,0C0H,00H
DB 00H,00H,3EH,0FDH,8CH,0D0H,0C0H,00H,00H,00H,86H,0F5H,0A1H,0E2H,80H,00H
DB 00H,02H,38H,95H,23H,15H,0C0H,00H,00H,04H,0ADH,9AH,34H,0C8H,80H,00H
DB 00H,05H,94H,2CH,63H,0E5H,0C0H,00H,00H,05H,8BH,0BFH,35H,67H,40H,00H
DB 00H,04H,0FCH,66H,42H,7CH,00H,00H,00H,00H,07H,79H,73H,0C5H,40H,00H
DB 00H,07H,0F2H,0DEH,5BH,0D7H,40H,00H,00H,04H,15H,97H,05H,0C6H,0C0H,00H
DB 00H,05H,0D3H,59H,05H,0FFH,40H,00H,00H,05H,0D3H,0F0H,0E1H,9DH,00H,00H
DB 00H,05H,0D1H,0B8H,5EH,89H,40H,00H,00H,04H,12H,2AH,0C9H,3EH,40H,00H
DB 00H,07H,0F3H,31H,61H,53H,40H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
DB 00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H


DATA      ENDS
STACKS    SEGMENT
          DB 2560 DUP(?)
STACKS    ENDS
CODE      SEGMENT
          ASSUME CS:CODE,DS:DATA,SS:STACKS,ES:DATA

 

START:
    MOV AX, DATA
    MOV DS, AX
    ;8255初始化
    MOV DX, PORT_CTL
    MOV AL, 10000010B
    OUT DX, AL
    ;LCD清屏
    CALL CLEAR
    CALL LCD_DISP_INIT
    ;8259A初始化
    CLI
    MOV AX,CS
    MOV DS,AX
    MOV DX,OFFSET IR0
    MOV AL,0BH
    MOV AH,25H
    INT 21H   
    IN AL,21H
    AND AL,0F7H
    OUT 21H,AL
    STI;必须要开中断！！！否则是不允许可屏蔽中断的请求的

    ;温控子程序，上限19H(25)，下限0FH(15)，一秒检测一次
    MOV AX, DATA
    MOV DS, AX
TEM_BEGIN:
    MOV WORD PTR TEM_ADR,0FH
    ;延时1s子程序
    ;产生0.5ms一周期的时钟
    MOV AL,00110111B  ; 通道0，先低后高，方式3，BCD计数
    MOV DX,CLK_CTL
    OUT DX,AL
    MOV DX,CLK_0
    MOV AL,00H
    OUT DX,AL
    MOV AL,10H
    OUT DX,AL
UP0:
    ; OUT0接CLK1
    MOV AL,01110001B   ; 通道1，先低后高，方式0，BCD计数
    MOV DX,CLK_CTL
    OUT DX,AL
    MOV DX,CLK_1
    MOV AL,00H
    OUT DX,AL
    MOV AL,20H
UP:

    OUT DX,AL
    MOV DX,PORT_273
    MOV AX,WORD PTR TEM_ADR
    MOV BL,0AH
    DIV BL;商在AL，余数在AH
    MOV BYTE PTR AL_DATA,AL
    MOV BYTE PTR AH_DATA,AH
    ;显示十位
    MOV AH,00H
    MOV DI,AX
    LEA BX,LED_DATA
    MOV AL,BYTE PTR[BX+DI]
    NOT AL
    ADD AL,80H
    OUT DX,AL
    ;显示个位
    MOV AL,BYTE PTR AH_DATA
    MOV DI,AX
    MOV AL,BYTE PTR[BX+DI]
    NOT AL
    OUT DX,AL
    ; JMP UP
    ; CALL MOTOR
    MOV DX,PORT_B
    IN AL,DX  ; B口输入OUT1，检测高电平
    TEST AL,20H
    JZ UP  ; 为高电平，计数结束，不跳转， 检测出上升沿，延时结束

    LEA BX,TEM_ADR
    INC BYTE PTR [BX]
    CMP BYTE PTR [BX],19H
    JNZ UP0
DOWN0:
    ; OUT0接CLK1
    MOV AL,01110001B   ; 通道1，先低后高，方式0，BCD计数
    MOV DX,CLK_CTL
    OUT DX,AL
    MOV DX,CLK_1
    MOV AL,00H
    OUT DX,AL
    MOV AL,20H
DOWN:
    OUT DX,AL
    MOV DX,PORT_273
    MOV AX,WORD PTR TEM_ADR
    MOV BL,0AH
    DIV BL;商在AL，余数在AH
    MOV BYTE PTR AL_DATA,AL
    MOV BYTE PTR AH_DATA,AH
    ;显示十位
    MOV AH,00H
    MOV DI,AX
    LEA BX,LED_DATA
    MOV AL,BYTE PTR[BX+DI]
    NOT AL
    ADD AL,80H
    OUT DX,AL
    ;显示个位
    MOV AL,BYTE PTR AH_DATA
    MOV DI,AX
    MOV AL,BYTE PTR[BX+DI]
    NOT AL
    OUT DX,AL
    ; JMP UP
    
    MOV DX,PORT_B
    IN AL,DX  ; B口输入OUT1，检测高电平
    TEST AL,20H
    JZ DOWN  ; 为高电平，计数结束，不跳转， 检测出上升沿，延时结束

    LEA BX,TEM_ADR
    DEC BYTE PTR [BX]
    CMP BYTE PTR [BX],0FH
    JNZ DOWN0
    JMP TEM_BEGIN
    
IR0:
   S:  MOV DX,PORT_C
    MOV AL,00H
    OUT DX,AL
    ; 查看所有键是否松开
    MOV DX,PORT_B
WAIT_OPEN:
    IN AL,DX
    AND AL,0FH
    CMP AL,0FH
    JNE WAIT_OPEN
    ; 各键均松开，查列是否有0
WAIT_PRES:
    IN AL,DX
    AND AL,0FH ; 只查低四位
    CMP AL,0FH
    JE WAIT_PRES
    ; 延时20ms，消抖动
    MOV CX,16EAH
DELAY1:LOOP DELAY1 ; CX为0，跳出循环
    IN AL,DX ; 再查列，看按键是否仍被压着
    AND AL,0FH
    CMP AL,0FH
    JE WAIT_PRES
    ; 键仍被按下，确定哪一个键被按下
;选择物品子程序
    MOV AL,0FEH
    MOV CL,AL
NEXT_ROW:
    MOV DX,PORT_C
    OUT DX,AL ; 向一行输出低电平
    MOV DX,PORT_B
    IN AL,DX ; 读入B口状态
    AND AL,0FH ; 只检测低四位，即列值
    CMP AL,0FH ; 是否均为1，若是，则此行无按键按下
    JNE ENCODE ; 否，此行有按键按下，转去编码
    ROL CL,1 ; 均为1，转去下行
    MOV AL,CL
    JMP NEXT_ROW ; 查看下一行
ENCODE:
    MOV BX,000FH
    IN AL,DX
    AND AL,11011111B
NEXT_TRY:
    CMP AL,KEYBOARD_DATA[BX] ; 读入的行列值是否与表中的值相等
    JE DONE ; 相等，跳至数码管显示
    DEC BX
    JNS NEXT_TRY ; 非负，继续检查
DONE:
    cmp bx,0001H ; 选择1号商品
    JZ G1
    cmp bx,0002H ; 选择2号商品
    JZ G2
    cmp bx,0003H ; 选择3号商品
    JZ G3
    cmp bx,0004H ; 选择4号商品
    JZ G4
    cmp bx,000EH ; 确认选择商品
    JZ G5
    cmp bx,000FH ; 取消选择商品
    JZ temp1
    cmp bx,000CH ; 选择补货商品
    JZ temp2
    cmp bx,000DH ; 选择查看收益
    JZ temp3
    JMP temp1
temp1:
    CALL CLEAR
    CALL LCD_DISP_INIT
    JMP GO_OUT
temp2:
    CALL LCD_DISP_ADD
    CALL LCD_DISP_INIT
    JMP GO_OUT
temp3:
    CALL MONEY_SHOW
    CALL LCD_DISP_INIT
    JMP GO_OUT
G1:
    MOV CH,1 ; 显示1号商品信息
    mov BYTE PTR WHICH_GOOD,ch
    CALL LCD_DISP_CHECK
    JMP GO_OUT
G2:
    MOV CH,2 ; 显示2号商品信息
    mov BYTE PTR WHICH_GOOD,ch
    CALL LCD_DISP_CHECK
    JMP GO_OUT
G3:
    MOV CH,3 ; 显示3号商品信息
    mov BYTE PTR WHICH_GOOD,ch
    CALL LCD_DISP_CHECK
    JMP GO_OUT
G4:
    MOV CH,4 ; 显示4号商品信息
    mov BYTE PTR WHICH_GOOD,ch
    CALL LCD_DISP_CHECK
    JMP GO_OUT
G5:
    
    call LCD_DISP_WAITING
    JMP GO_OUT
    
GO_OUT: 
    MOV DX,PORT_C
    MOV AL,00H
    OUT DX,AL
    
    MOV AL,01100011B
    OUT 20H,AL
    IRET
LCD_DISP_CHECK    PROC
    CALL CLEAR
    CALL DRAW_IMG

    ; 显示选择物品，等待确认
    LEA BX, GOODS_TITLE
    MOV BYTE PTR HZ_ADR, 80H ; 
    CMP WHICH_GOOD, 1
    jz G1_SHOW
    CMP WHICH_GOOD, 2
    jz G2_SHOW
    CMP WHICH_GOOD, 3
    jz G3_SHOW
    CMP WHICH_GOOD, 4
    jz G4_SHOW

G1_SHOW:
    add bx,0 ; 显示物品1
    jmp SHOW_NEXT
G2_SHOW:
    add bx,16 ; 显示物品2
    jmp SHOW_NEXT
G3_SHOW:
    add bx,32 ; 显示物品3
    jmp SHOW_NEXT
G4_SHOW:
    add bx,48 ; 显示物品4
    jmp SHOW_NEXT
SHOW_NEXT:
    STRING_SHOW 4
    MOV BYTE PTR HZ_ADR, 90H ; 第二行起始端口地址
    STRING_SHOW 3
    ; LEA BX, BLANK_LINE
    ; MOV BYTE PTR HZ_ADR, 88H ; 第三行起始端口地址
    ; STRING_SHOW 4
    LEA BX, YES_NO  ; 指向是否确认信息
    MOV BYTE PTR HZ_ADR, 98H  ; 第四行起始端口地址
    STRING_SHOW 4
    RET
LCD_DISP_CHECK ENDP
CLEAR PROC
    ;LCD清屏
    MOV AL,01H
    MOV DX,PORT_A
    OUT DX,AL ; 设置CLEAR命令
    CMD_SETUP ; 启动LCD执行命令
    RET
CLEAR ENDP
LCD_DISP_INIT PROC
    ;LCD初始化显示物品
    CALL CLEAR
    MOV AX,DATA
    LEA BX, INI_GOODS_DATA ; 加载物品字符显示地址
    MOV BYTE PTR HZ_ADR, 80H ; 第一行起始端口地址
    STRING_SHOW 8
    MOV BYTE PTR HZ_ADR, 90H ; 第二行起始端口地址
    STRING_SHOW 8
    MOV BYTE PTR HZ_ADR, 88H ; 第三行起始端口地址
    STRING_SHOW 8
    MOV BYTE PTR HZ_ADR, 98H ; 第三行起始端口地址
    STRING_SHOW 8
    RET
LCD_DISP_INIT ENDP
DRAW_IMG PROC
    ;画二维码子程序
    MOV DX,PORT_A
    MOV AL,34H
    OUT DX,AL
    CMD_SETUP
    LEA BX,QC_GOODS
    ;上半部分
    MOV CL,0
LOOP1:
    MOV CH,0
LOOP2:
    MOV AL,80H
    ADD AL,CL
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,80H
    ADD AL,4
    ADD AL,CH
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,[BX]
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    MOV AL,[BX]
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    INC CH
    CMP CH,4
    JNZ LOOP2
    
    INC CL
    CMP CL,32
    JNZ LOOP1

    ;下半部分
    MOV CL,0
LOOP3:
    MOV CH,0
LOOP4:
    MOV AL,80H
    ADD AL,CL
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,88H
    ADD AL,4
    ADD AL,CH
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,[BX]
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    MOV AL,[BX]
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    INC CH
    CMP CH,4
    JNZ LOOP4
    
    INC CL
    CMP CL,32
    JNZ LOOP3
    

    ;上半部分
    MOV CL,0
LOOP5:
    MOV CH,0
LOOP6:
    MOV AL,80H
    ADD AL,CL
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,80H
    ADD AL,CH
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,00H
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    MOV AL,00H
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    INC CH
    CMP CH,4
    JNZ LOOP6
    
    INC CL
    CMP CL,32
    JNZ LOOP5

    ;下半部分
    MOV CL,0
LOOP7:
    MOV CH,0
LOOP8:
    MOV AL,80H
    ADD AL,CL
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,88H
    ADD AL,CH
    MOV DX,PORT_A
    OUT DX,AL
    CMD_SETUP

    MOV AL,00H
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    MOV AL,00H
    MOV DX,PORT_A
    OUT DX,AL
    DATA_SETUP
    INC BX

    INC CH
    CMP CH,4
    JNZ LOOP8
    
    INC CL
    CMP CL,32
    JNZ LOOP7
    ;CALL MOTOR
    MOV DX,PORT_A
    MOV AL,36H
    OUT DX,AL
    CMD_SETUP

    MOV DX,PORT_A
    MOV AL,30H
    OUT DX,AL
    CMD_SETUP
    RET
DRAW_IMG ENDP
DELAY_1S PROC
    ;延时1s子程序
    ;产生0.5ms一周期的时钟
    MOV AL,00110111B  ; 通道0，先低后高，方式3，BCD计数
    MOV DX,CLK_CTL
    OUT DX,AL
    MOV DX,CLK_0
    MOV AL,00H
    OUT DX,AL
    MOV AL,10H
    OUT DX,AL
    ; OUT0接CLK1
    MOV AL,01110001B   ; 通道1，先低后高，方式0，BCD计数
    MOV DX,CLK_CTL
    OUT DX,AL
    MOV DX,CLK_1
    MOV AL,00H
    OUT DX,AL
    MOV AL,20H
    OUT DX,AL

HEIGHT:
    MOV DX,PORT_B
    IN AL,DX  ; B口输入OUT1，检测高电平
    TEST AL,20H
    JZ HEIGHT ; 为高电平，计数结束，不跳转， 检测出上升沿，延时结束
    RET
DELAY_1S ENDP
MONEY_SHOW PROC
;显示收益
    CALL CLEAR
    CALL CAL_MONEY
    LEA BX,STRING_MONEY
    MOV BYTE PTR HZ_ADR, 80H ; 第一行起始端口地址
    STRING_SHOW 6
    CALL DELAY_1S
MONEY_SHOW ENDP
CAL_MONEY PROC
;判断收益，修改lcd显示，最高三位
    ;百位
    LEA BX,MONEY_COUNT
    MOV AX,[BX]
    MOV BL,64H
    DIV BL;商在AL，余数在AH
    LEA BX,STRING_MONEY
    ADD BX,4
    MOV CX,0A3B0H
    ADD CL,AL
    MOV [BX],CX
    ;十位
    MOV AL,AH
    MOV AH,00H
    MOV BL,0AH
    DIV BL
    LEA BX,STRING_MONEY
    ADD BX,6
    MOV CX,0A3B0H
    ADD CL,AL
    MOV [BX],CX
    ;个位
    LEA BX,STRING_MONEY
    ADD BX,8
    MOV CH,0A3H
    MOV CL,0B0H
    ADD CL,AH
    MOV [BX],CX
    RET
CAL_MONEY ENDP
LCD_DISP_ADD PROC
    ;显示输入的口令
    CALL CLEAR
    LEA BX, ADD_GOOD
    MOV BYTE PTR HZ_ADR, 80H ; 第一行起始端口地址
    STRING_SHOW 6
    
    LEA BX,PASS_INPUT
    MOV BYTE PTR HZ_ADR, 98H ; 第四行起始端口地址
    STRING_SHOW 4
    CALL ADD_GOOD_KEY
    RET
LCD_DISP_ADD ENDP

LCD_DISP_WAITING    PROC
    CALL CLEAR
    ; 等待出货
    LEA BX, OUT_GOOD
    MOV BYTE PTR HZ_ADR, 98H ; 第四行起始端口地址
    STRING_SHOW 8
    CALL MOTOR ; 电机转动\出货成功
    CALL CLEAR
                                            
    LEA BX,OUT_GOOD_SUCCESS
    MOV BYTE PTR HZ_ADR, 80H ; 第一行起始端口地址
    STRING_SHOW 4
    CALL DELAY_1S
    CALL GOODS_DEC
    CALL LCD_DISP_INIT
    RET
LCD_DISP_WAITING ENDP
MOTOR PROC
    ; 产生0.5ms一周期的时钟
    MOV AL,00110111B ; 通道0，先低后高，方式3，BCD计数
    MOV DX,CLK_CTL
    OUT DX,AL
    MOV DX,CLK_0
    MOV AL,00H
    OUT DX,AL
    MOV AL,10H
    OUT DX,AL
    ; OUT0接CLK1
    MOV AL,01110001B ; 通道1，先低后高，方式0，BCD计数
    MOV DX,CLK_CTL
    OUT DX,AL
    MOV DX,CLK_1
    MOV AL,00H
    OUT DX,AL
    MOV AL,20H
    OUT DX,AL

    MOV AL,0FFH ; 高电平电机工作
    MOV DX,PORT_DAC
    OUT DX,AL
HEIGHT1:
    MOV DX,PORT_B
    IN AL,DX ; B口输入OUT1，检测高电平
    TEST AL,20H
    JZ HEIGHT1 ; 为高电平，计数结束，不跳转， 检测出上升沿，延时结束

    MOV AL,00H ; 电机停止
    MOV DX,PORT_DAC
    OUT DX,AL
    ret
MOTOR ENDP
GOODS_DEC PROC
    ;收益相应增加
    LEA BX,MONEY_COUNT
    MOV CX,[BX]
    ;相应货物减一
    
    CMP WHICH_GOOD, 1
    jz G1_DEC
    CMP WHICH_GOOD, 2
    jz G2_DEC
    CMP WHICH_GOOD, 3
    jz G3_DEC
    CMP WHICH_GOOD, 4
    jz G4_DEC
G1_DEC:
    LEA BX, GOODS_TITLE
    add bx,0
    MOV AX,[BX+10]
    SUB AX,0A3B0H
    ADD CX,AX
    MOV MONEY_COUNT,CX
    LEA BX, INI_GOODS_DATA
    add bx,0 ; 显示物品1
    jmp JUDEG_GOOD
G2_DEC:
    LEA BX, GOODS_TITLE
    add bx,16
    MOV AX,[BX+10]
    SUB AX,0A3B0H
    ADD CX,AX
    MOV MONEY_COUNT,CX
    LEA BX, INI_GOODS_DATA
    add bx,16 ; 显示物品2
    jmp JUDEG_GOOD
G3_DEC:
    LEA BX, GOODS_TITLE
    add bx,32
    MOV AX,[BX+10]
    SUB AX,0A3B0H
    ADD CX,AX
    MOV MONEY_COUNT,CX
    LEA BX, INI_GOODS_DATA
    add bx,32 ; 显示物品3
    jmp JUDEG_GOOD
G4_DEC:
    LEA BX, GOODS_TITLE
    add bx,48
    MOV AX,[BX+10]
    SUB AX,0A3B0H
    ADD CX,AX
    MOV MONEY_COUNT,CX
    LEA BX, INI_GOODS_DATA
    add bx,48 ; 显示物品4
    jmp JUDEG_GOOD

JUDEG_GOOD: ; 判断剩余量
    add bx,10
    mov ax,[bx]
    test ax,0001H ; 判断十位是否为1，为1不跳转
    jnz SW
    add bx,2
    dec BYTE PTR[bx]
    ret
SW:
    dec BYTE PTR[bx]
    add bx,2
    add BYTE PTR[bx],9
    ret
GOODS_DEC ENDP
ADD_GOOD_KEY PROC
; 向所有行送0
S1:  MOV DX,PORT_C
    MOV AL,00H
    OUT DX,AL
    ; 查看所有键是否松开
    MOV DX,PORT_B
WAIT_OPEN1:
    IN AL,DX
    AND AL,0FH
    CMP AL,0FH
    JNE WAIT_OPEN1
    ; 各键均松开，查列是否有0
WAIT_PRES1:
    IN AL,DX
    AND AL,0FH ; 只查低四位
    CMP AL,0FH
    JE WAIT_PRES1
    ; 延时20ms，消抖动
    MOV CX,16EAH
DELAY2:LOOP DELAY2 ; CX为0，跳出循环
    IN AL,DX ; 再查列，看按键是否仍被压着
    AND AL,0FH
    CMP AL,0FH
    JE WAIT_PRES1
    ; 键仍被按下，确定哪一个键被按下
    MOV AL,0FEH
    MOV CL,AL
NEXT_ROW1:MOV DX,PORT_C
    OUT DX,AL ; 向一行输出低电平
    MOV DX,PORT_B
    IN AL,DX ; 读入B口状态
    AND AL,0FH ; 只检测低四位，即列值
    CMP AL,0FH ; 是否均为1，若是，则此行无按键按下
    JNE ENCODE1 ; 否，此行有按键按下，转去编码
    ROL CL,1 ; 均为1，转去下行
    MOV AL,CL
    JMP NEXT_ROW1 ; 查看下一行
ENCODE1:MOV BX,000FH
    IN AL,DX
    AND AL,11011111B
NEXT_TRY1:CMP AL,KEYBOARD_DATA[BX] ; 读入的行列值是否与表中的值相等
    JE DONE1 ; 相等，跳至数码管显示
    DEC BX
    JNS NEXT_TRY1 ; 非负，继续检查
    ; RET
DONE1:
    mov ax,bx
    LEA BX, PASS_COUNT
    mov cx,[bx]
    inc BYTE PTR[bx]
    LEA BX, PASS_INPUT
    add cx,cx
    add bx,cx
    add ax,0A3B0H
    mov [bx],ax
    LEA BX, PASS_INPUT
    MOV BYTE PTR HZ_ADR, 98H ; 第四行起始端口地址
    STRING_SHOW 4
    LEA BX, PASS_COUNT
    cmp BYTE PTR[bx],4
    jz ADD_OK
    jmp s1
ADD_OK:
    mov cx,0
PASS_WHILE:
    LEA BX, PASS_INPUT
    add bx,cx
    mov ax,[bx]
    LEA BX, PASS_WORD
    add bx,cx
    cmp cx,8
    jz PASS_TRUE
    add cx,2
    cmp [bx],ax
    jz PASS_WHILE
    mov cx,0
pass_re:
    LEA BX, PASS_INPUT
    add bx,cx
    mov PASS_INPUT[bx],0A1A0H
    add cx,2
    cmp cx,8
    jnz pass_re
    LEA BX, PASS_COUNT
    mov BYTE PTR[bx],0000h
    LEA BX, PASS_WRONG
    MOV BYTE PTR HZ_ADR, 98H ; 第四行起始端口地址
    STRING_SHOW 4
    CALL DELAY_1S
    RET
PASS_TRUE:
    ;显示补货成功
    CALL CLEAR
    LEA BX, ADD_GOOD_OK
    MOV BYTE PTR HZ_ADR, 80H ; 第一行起始端口地址
    STRING_SHOW 4

    CALL DELAY_1S
    ; LCD初始化显示物品
    LEA BX, INI_GOODS_DATA
    MOV AX,0A3B1H
    MOV CX,0A3B0H
    mov [bx+10],AX
    mov [bx+12],CX
    add bx,16
    mov [bx+10],AX
    mov [bx+12],CX
    add bx,16
    mov [bx+10],AX
    mov [bx+12],CX
    add bx,16
    mov [bx+10],AX
    mov [bx+12],CX
    MOV CX,0
    MOV AX,0A1A0H
pass_re1:
    LEA BX,PASS_INPUT
    ADD bx,cx
    MOV [bx],AX
    ADD cx,2
    CMP cx,8
    JNZ pass_re1
    LEA BX, PASS_COUNT
    MOV PASS_COUNT[0],0000h
    RET
ADD_GOOD_KEY ENDP

CODE ENDS
    END START
